#!/usr/bin/env bash

set -euo pipefail

# Load user config if it exists
CONFIG_FILE="${XDG_CONFIG_HOME:-$HOME/.config}/tmux-pywal-monitor/config.sh"
if [[ -f "$CONFIG_FILE" ]]; then
    source "$CONFIG_FILE"
fi

# Default values if not defined in config.sh
TMUX_CONF="${TMUX_CONF:-$HOME/.tmuxline.conf}"
CACHE_DIR="${XDG_CACHE_HOME:-$HOME/.cache}"
COLORS_FILE="${COLORS_FILE:-$CACHE_DIR/wal/colors.json}"
UPDATE_INTERVAL="${UPDATE_INTERVAL:-5}"

VIM_LOCK_DIR="${XDG_RUNTIME_DIR:-/tmp}/tmux-statusline-monitor"
LOCK_FILE="$VIM_LOCK_DIR/vim-controlled"
mkdir -p "$VIM_LOCK_DIR"

check_vim_control() {
    [[ -f "$LOCK_FILE" ]]
}

check_vim_sessions() {
    local tmux_sessions
    tmux_sessions=$(tmux list-sessions -F '#{session_name}' 2>/dev/null || true)
    
    for session in $tmux_sessions; do
        if tmux list-panes -t "$session" -F '#{pane_current_command}' | grep -Eq "vim|nvim"; then
            return 0
        fi
    done
    return 1
}

generate_tmux_colors() {
    if check_vim_control || check_vim_sessions; then
        return
    fi
    
    if [[ ! -f "$COLORS_FILE" ]]; then
        echo "Colors file not found: $COLORS_FILE"
        return
    fi
    
    local colors background foreground accent message_bg
    colors=$(cat "$COLORS_FILE")
    background=$(echo "$colors" | jq -r '.special.background')
    foreground=$(echo "$colors" | jq -r '.special.foreground')
    accent=$(echo "$colors" | jq -r '.colors.color2')
    message_bg=$(echo "$colors" | jq -r '.colors.color8')
    
    if [[ ! -f "$TMUX_CONF.backup" ]]; then
        cp "$TMUX_CONF" "$TMUX_CONF.backup"
    fi
    
    # Generate new tmux configuration
    cat > "$TMUX_CONF" <<EOF
# Generated by tmux-statusline-monitor
# Original configuration is in $TMUX_CONF.backup

set -g status-justify "left"
set -g status "on"
set -g status-left-style "none"
set -g message-command-style "fg=$foreground,bg=$message_bg"
set -g status-right-style "none"
set -g pane-active-border-style "fg=$accent"
set -g status-style "none,bg=$background"
set -g message-style "fg=$foreground,bg=$message_bg"
set -g pane-border-style "fg=$message_bg"
set -g status-right-length "100"
set -g status-left-length "100"
setw -g window-status-activity-style "none"
setw -g window-status-separator ""
setw -g window-status-style "none,fg=$foreground,bg=$background"
set -g status-left "#[fg=$background,bg=$accent] #{prefix_highlight} #S #[fg=$accent,bg=$background] #(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD) #[fg=$accent,bg=$background,nobold,nounderscore,noitalics]"
set -g status-right "#[fg=$foreground,bg=$message_bg] #(cd #{pane_current_path}; git status -s) | #(cd #{pane_current_path}; git log --oneline | wc -l) commits | %Y-%m-%d %H:%M"
setw -g window-status-format "#[fg=$foreground,bg=$background] #I #[fg=$foreground,bg=$background] #W "
setw -g window-status-current-format "#[fg=$background,bg=$message_bg,nobold,nounderscore,noitalics]#[fg=$foreground,bg=$message_bg] #I #[fg=$foreground,bg=$message_bg] #W #[fg=$message_bg,bg=$background,nobold,nounderscore,noitalics]"
EOF

    if tmux list-sessions &>/dev/null; then
        tmux source-file "$TMUX_CONF"
    fi
}

cleanup() {
    # Restore original tmuxline configuration if no vim control
    if [[ -f "$TMUX_CONF.backup" ]] && ! check_vim_control; then
        mv "$TMUX_CONF.backup" "$TMUX_CONF"
        tmux source-file "$TMUX_CONF" 2>/dev/null || true
    fi
    exit 0
}

trap cleanup SIGTERM SIGINT

LAST_MODIFIED=0

while true; do
    if [[ -f "$COLORS_FILE" ]]; then
        current_modified=$(stat -c %Y "$COLORS_FILE")
        if (( current_modified > LAST_MODIFIED )); then
            generate_tmux_colors
            LAST_MODIFIED=$current_modified
        fi
    fi
    sleep "$UPDATE_INTERVAL"
done
